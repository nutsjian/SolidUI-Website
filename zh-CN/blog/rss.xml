<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>SolidUI Blog</title>
        <link>https://website.solidui.top/zh-CN/blog</link>
        <description>SolidUI Blog</description>
        <lastBuildDate>Mon, 03 Jul 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-CN</language>
        <item>
            <title><![CDATA[SolidUI社区-独立部署和Docker通信分析]]></title>
            <link>https://website.solidui.top/zh-CN/blog/2023/07/03/independent-deployment-communication-analysis</link>
            <guid>https://website.solidui.top/zh-CN/blog/2023/07/03/independent-deployment-communication-analysis</guid>
            <pubDate>Mon, 03 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[背景]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="背景">背景<a href="#背景" class="hash-link" aria-label="背景的直接链接" title="背景的直接链接">​</a></h2><p>随着文本生成图像的语言模型兴起，SolidUI想帮人们快速构建可视化工具，可视化内容包括2D,3D,3D场景，从而快速构三维数据演示场景。SolidUI 是一个创新的项目，旨在将自然语言处理（NLP）与计算机图形学相结合，实现文生图功能。通过构建自研的文生图语言模型，SolidUI 利用 RLHF (Reinforcement Learning Human Feedback) 流程实现从文本描述到图形生成的过程。</p><p>项目地址: <a href="https://github.com/CloudOrc/SolidUI" target="_blank" rel="noopener noreferrer">https://github.com/CloudOrc/SolidUI</a></p><p>项目镜像地址: <a href="https://gitee.com/CloudOrc/SolidUI" target="_blank" rel="noopener noreferrer">https://gitee.com/CloudOrc/SolidUI</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="独立部署通信">独立部署通信<a href="#独立部署通信" class="hash-link" aria-label="独立部署通信的直接链接" title="独立部署通信的直接链接">​</a></h2><p>单独部署，与外网通信，这块不难只有相应公网，就可以正常访问。</p><p>单独部署，内部进程间通信，如果有多个网卡，ip addr 涉及多个ip ，需要设置内网ip 或者域名 ，去一一对应。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="例如">例如<a href="#例如" class="hash-link" aria-label="例如的直接链接" title="例如的直接链接">​</a></h3><p>如果有多个网卡，ip addr 涉及多个ip ，需要设置内网ip 或者域名 ，去一一对应，没有的话用127.0.0.1 就可以。</p><p>设置 Snakemq 通信</p><div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">soliduimodelui/.env  SNAKEMQ_LISTENER server 监听器 ，设置内网ip</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">soliduimodelui/.env  SNAKEMQ_CONNECTOR  与server 连接ip  ，设置内网ip</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="docker-部署通信">Docker 部署通信<a href="#docker-部署通信" class="hash-link" aria-label="Docker 部署通信的直接链接" title="Docker 部署通信的直接链接">​</a></h2><p>容器化部署，在此我简化描述，不带容器管理框架描述，因为通信最根本的明白后，其它在框架中也就明白了，外部通信，开放端口 ，内部通信，通过设置网段名称，不同容器通信，通过容器名称进行。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="例如-1">例如<a href="#例如-1" class="hash-link" aria-label="例如的直接链接" title="例如的直接链接">​</a></h3><blockquote><p>数据库连接</p></blockquote><p>在docker-compose.yml 中，设置了Mysql数据库名称为mysql </p><p>所以solidui-entrance application.yaml  中  datasource.url  mysql 替换 localhost</p><p>soliduimodelui/.env  DB_HOST mysql 替换 localhost </p><blockquote><p>soliduimodelui/.env Snakemq 通信</p></blockquote><div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">soliduimodelui/.env  SNAKEMQ_LISTENER server 监听器 ，设置0.0.0.0</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">soliduimodelui/.env  SNAKEMQ_CONNECTOR  与server 连接ip  ，设置soliduimodelui</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="结语">结语<a href="#结语" class="hash-link" aria-label="结语的直接链接" title="结语的直接链接">​</a></h2><p>本文通过讲解独立部署 和 Docker 通信分析 ，告诉部署设置ip时候方式，不是盲目设置localhost就能解决，为大家后续更好共建SolidUI提供思路。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="如果成为贡献者">如果成为贡献者<a href="#如果成为贡献者" class="hash-link" aria-label="如果成为贡献者的直接链接" title="如果成为贡献者的直接链接">​</a></h2><ul><li>官方文档贡献。发现文档的不足、优化文档，持续更新文档等方式参与社区贡献。通过文档贡献，让开发者熟悉如何提交PR和真正参与到社区的建设。参考攻略：<a href="https://github.com/CloudOrc/SolidUI/discussions/54" target="_blank" rel="noopener noreferrer">https://github.com/CloudOrc/SolidUI/discussions/54</a></li><li>代码贡献。我们梳理了社区中简单并且容易入门的的任务，非常适合新人做代码贡献。请查阅新手任务列表：<a href="https://github.com/CloudOrc/SolidUI/issues/12" target="_blank" rel="noopener noreferrer">https://github.com/CloudOrc/SolidUI/issues/12</a></li><li>内容贡献：发布SolidUI开源组件相关的内容，包括但不限于安装部署教程、使用经验、案例实践等，形式不限，请投稿给小助手。例如：<a href="https://github.com/CloudOrc/SolidUI/issues/10" target="_blank" rel="noopener noreferrer">https://github.com/CloudOrc/SolidUI/issues/10</a></li><li>社区答疑：积极在社区中进行答疑、分享技术、帮助开发者解决问题等；
其他：积极参与社区活动、成为社区志愿者、帮助社区宣传、为社区发展提供有效建议等；</li></ul>]]></content:encoded>
            <category>SolidUI</category>
            <category>AIGC</category>
            <category>stable-diffusion</category>
        </item>
        <item>
            <title><![CDATA[SolidUI社区-Snakemq通信源码分析]]></title>
            <link>https://website.solidui.top/zh-CN/blog/2023/07/02/snakemq-communication-source-code-analysis</link>
            <guid>https://website.solidui.top/zh-CN/blog/2023/07/02/snakemq-communication-source-code-analysis</guid>
            <pubDate>Sun, 02 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[背景]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="背景">背景<a href="#背景" class="hash-link" aria-label="背景的直接链接" title="背景的直接链接">​</a></h2><p>随着文本生成图像的语言模型兴起，SolidUI想帮人们快速构建可视化工具，可视化内容包括2D,3D,3D场景，从而快速构三维数据演示场景。SolidUI 是一个创新的项目，旨在将自然语言处理（NLP）与计算机图形学相结合，实现文生图功能。通过构建自研的文生图语言模型，SolidUI 利用 RLHF (Reinforcement Learning Human Feedback) 流程实现从文本描述到图形生成的过程。</p><p>项目地址: <a href="https://github.com/CloudOrc/SolidUI" target="_blank" rel="noopener noreferrer">https://github.com/CloudOrc/SolidUI</a></p><p>项目镜像地址: <a href="https://gitee.com/CloudOrc/SolidUI" target="_blank" rel="noopener noreferrer">https://gitee.com/CloudOrc/SolidUI</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="snakemq介绍">Snakemq介绍<a href="#snakemq介绍" class="hash-link" aria-label="Snakemq介绍的直接链接" title="Snakemq介绍的直接链接">​</a></h2><p>SnakeMQ是一个轻量级的消息队列(MQ)系统,主要用于在Python中实现异步任务队列和消息传递。</p><p>SolidUI 模型代理模块（soliduimodelui） 用到Snakemq , 涉及到内部通信时候，如果client 和server 不一一对应，通信就有问题，虽然日志不报错，但是不回返回结果，本文主要讲相关通信问题，为后续共建伙伴提供解决思路。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="snakemq作用">Snakemq作用<a href="#snakemq作用" class="hash-link" aria-label="Snakemq作用的直接链接" title="Snakemq作用的直接链接">​</a></h2><h2></h2><ul><li>轻量级和易于使用 - SnakeMQ使用纯Python编写,无任何外部依赖,可以很容易地在任何Python项目中集成使用。</li><li>支持主流协议 - SnakeMQ实现了STOMP和AMQP等主流的MQ协议。</li><li>多种消息模型 - 支持发布-订阅、工作队列、请求-响应等多种消息模型。</li><li>持久化支持 - 支持将消息持久化到不同的后端,如Redis、MongoDB等。</li><li>高性能 - SnakeMQ针对Python进行了优化,单机可以处理上万消息每秒。</li><li>可扩展 - 可以水平扩展以实现集群,提高系统整体吞吐量。</li><li>多语言支持 - 除了Python SDK,还提供了NodeJS、Java等语言的SDK。</li></ul><p>SolidUI 中 soliduimodelui模块，是模型代理API，需要Web和 Kernel 通信用到Snakemq </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="snakemq-测试代码">Snakemq 测试代码<a href="#snakemq-测试代码" class="hash-link" aria-label="Snakemq 测试代码的直接链接" title="Snakemq 测试代码的直接链接">​</a></h2><blockquote><p>Snakemq client.py</p></blockquote><div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">import snakemq.link</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">import snakemq.packeter</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">import snakemq.messaging</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">import snakemq.rpc</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">import time</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">import json</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">import logging</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">logging.basicConfig(format="[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s")</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">logger = logging.getLogger(__name__)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">logger.setLevel(logging.INFO)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">console_handler = logging.StreamHandler()</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">console_handler.setLevel(logging.INFO)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">logger.addHandler(console_handler)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">logger.setLevel(logging.INFO)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">fh = logging.FileHandler('app.log')</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">logger.addHandler(fh)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">link = snakemq.link.Link()</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">packeter = snakemq.packeter.Packeter(link)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">messaging = snakemq.messaging.Messaging("client", "", packeter)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">connector = ("server", 8765)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">link.add_connector(connector)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">def on_connect(connector_id):</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    logger.info(f"Connected to: {connector_id}")</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">link.on_connect.add(on_connect)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">def on_disconnect(connector_id):</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    logger.info(f"已断开: {connector_id}")</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">link.on_disconnect.add(on_disconnect)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">def on_recv(conn, ident, message):</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    logger.info(f"client接收到: {message.data}, 来自: {ident}")</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">messaging.on_message_recv.add(on_recv)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">message = snakemq.message.Message(json.dumps({"type": "status", "value": "ready"}).encode("utf-8"), ttl=600)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">messaging.send_message("server", message)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">while True:</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    link.loop()</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    time.sleep(0.1)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>Snakemq server.py</p></blockquote><div class="language-plain codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-plain codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">import snakemq.link</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">import snakemq.packeter</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">import snakemq.messaging</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">import snakemq.rpc</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">import time</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">import json</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">import logging</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">logging.basicConfig(format="[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s")</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">logger = logging.getLogger(__name__)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">logger.setLevel(logging.INFO)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">console_handler = logging.StreamHandler()</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">console_handler.setLevel(logging.INFO)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">logger.addHandler(console_handler)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">logger.setLevel(logging.INFO)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">fh = logging.FileHandler('app.log')</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">logger.addHandler(fh)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">link = snakemq.link.Link()</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">packeter = snakemq.packeter.Packeter(link)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">messaging = snakemq.messaging.Messaging("server", "", packeter)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">link.add_listener(("0.0.0.0", 8765))</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">def on_recv(conn, ident, message):</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    logger.info(f"server接收到: {message.data}, 来自: {ident}")</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">messaging.on_message_recv.add(on_recv)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">message = snakemq.message.Message(json.dumps( {"type": "execute", "value": "abc"}).encode("utf-8"), ttl=600)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">messaging.send_message("client", message)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"># Main loop</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">while True:</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    link.loop()</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">    time.sleep(0.1)</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>Dockerfile</p></blockquote><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token plain">FROM python:3.8</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">WORKDIR /opt/snaketmq-test</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">RUN pip </span><span class="token function" style="color:rgb(0, 0, 255)">install</span><span class="token plain"> snakemq</span><br></span><span class="token-line" style="color:#000000"><span class="token plain">RUN python -c </span><span class="token string" style="color:rgb(163, 21, 21)">"import snakemq; print(snakemq.__file__); print(dir(snakemq))"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">COPY </span><span class="token builtin class-name" style="color:rgb(38, 127, 153)">.</span><span class="token plain"> </span><span class="token builtin class-name" style="color:rgb(38, 127, 153)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain">CMD </span><span class="token punctuation" style="color:rgb(4, 81, 165)">[</span><span class="token string" style="color:rgb(163, 21, 21)">"python"</span><span class="token plain">, </span><span class="token string" style="color:rgb(163, 21, 21)">"server.py"</span><span class="token punctuation" style="color:rgb(4, 81, 165)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>Dockerfile  build &amp; run</p></blockquote><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#000000;--prism-background-color:#ffffff"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#000000"><span class="token function" style="color:rgb(0, 0, 255)">docker</span><span class="token plain"> build -t snaketmq-test </span><span class="token builtin class-name" style="color:rgb(38, 127, 153)">.</span><span class="token plain">&nbsp;</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token function" style="color:rgb(0, 0, 255)">docker</span><span class="token plain"> network create mynet</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token function" style="color:rgb(0, 0, 255)">docker</span><span class="token plain"> run -d --name server --network mynet&nbsp; snaketmq-test</span><br></span><span class="token-line" style="color:#000000"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#000000"><span class="token plain"></span><span class="token function" style="color:rgb(0, 0, 255)">docker</span><span class="token plain"> run --network mynet&nbsp; snaketmq-test python client.py</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="snakemq通信">Snakemq通信<a href="#snakemq通信" class="hash-link" aria-label="Snakemq通信的直接链接" title="Snakemq通信的直接链接">​</a></h2><p>注意：Snakemq 测试代码，因为容器内通信，ip addr 会涉及到多个ip ，虽然容器设置网段mynet ，但是 server  link.add_listener(("0.0.0.0", 8765))  这行代码 </p><ul><li><p>server: 表示SnakeMQ的服务器实例。</p></li><li><p>link: server中的link属性,表示网络连接管理器。</p></li><li><p>add_listener: 向link中添加一个监听器。</p></li><li><p>("0.0.0.0", 8765): 监听的地址和端口。"0.0.0.0"表示监听所有网卡地址,"8765"表示监听8765端口。
client  connector = ("server", 8765)  link.add_connector(connector) 这行代码</p></li><li><p>connector = ("server", 8765) : 创建一个元组connector,里面包含了SnakeMQ服务器的地址"server"和端口8765。</p></li><li><p>link.add_connector(connector): 调用link对象(这里应该是SnakeMQ的连接对象)的add_connector方法,传入参数connector,将上一步创建的连接信息添加到连接对象中。</p></li><li><p>综合来看,这行代码的作用就是创建一个连接元组,包含SnakeMQ服务器的地址和端口,然后将这个连接信息添加到SnakeMQ的连接对象中,以建立SnakeMQ的客户端连接。</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="结语">结语<a href="#结语" class="hash-link" aria-label="结语的直接链接" title="结语的直接链接">​</a></h2><p>本文通过Snakemq 案例 来解释SolidUI 内部通信，让大家明白配置地址时候ip 为什么这样设置，目的是为了一一对应，不是盲目设置localhost就能解决，为大家后续更好共建SolidUI提供思路。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="如果成为贡献者">如果成为贡献者<a href="#如果成为贡献者" class="hash-link" aria-label="如果成为贡献者的直接链接" title="如果成为贡献者的直接链接">​</a></h2><ul><li>官方文档贡献。发现文档的不足、优化文档，持续更新文档等方式参与社区贡献。通过文档贡献，让开发者熟悉如何提交PR和真正参与到社区的建设。参考攻略：<a href="https://github.com/CloudOrc/SolidUI/discussions/54" target="_blank" rel="noopener noreferrer">https://github.com/CloudOrc/SolidUI/discussions/54</a></li><li>代码贡献。我们梳理了社区中简单并且容易入门的的任务，非常适合新人做代码贡献。请查阅新手任务列表：<a href="https://github.com/CloudOrc/SolidUI/issues/12" target="_blank" rel="noopener noreferrer">https://github.com/CloudOrc/SolidUI/issues/12</a></li><li>内容贡献：发布SolidUI开源组件相关的内容，包括但不限于安装部署教程、使用经验、案例实践等，形式不限，请投稿给小助手。例如：<a href="https://github.com/CloudOrc/SolidUI/issues/10" target="_blank" rel="noopener noreferrer">https://github.com/CloudOrc/SolidUI/issues/10</a></li><li>社区答疑：积极在社区中进行答疑、分享技术、帮助开发者解决问题等；
其他：积极参与社区活动、成为社区志愿者、帮助社区宣传、为社区发展提供有效建议等；</li></ul>]]></content:encoded>
            <category>SolidUI</category>
            <category>AIGC</category>
            <category>stable-diffusion</category>
        </item>
        <item>
            <title><![CDATA[SolidUI AI生成可视化，开创性开源项目，版本0.1.0 功能讲解]]></title>
            <link>https://website.solidui.top/zh-CN/blog/2023/07/01/function-explanation-0.1.0</link>
            <guid>https://website.solidui.top/zh-CN/blog/2023/07/01/function-explanation-0.1.0</guid>
            <pubDate>Sat, 01 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[背景]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="背景">背景<a href="#背景" class="hash-link" aria-label="背景的直接链接" title="背景的直接链接">​</a></h2><p>随着文本生成图像的语言模型兴起，SolidUI想帮人们快速构建可视化工具，可视化内容包括2D,3D,3D场景，从而快速构三维数据演示场景。SolidUI 是一个创新的项目，旨在将自然语言处理（NLP）与计算机图形学相结合，实现文生图功能。通过构建自研的文生图语言模型，SolidUI 利用 RLHF (Reinforcement Learning Human Feedback) 流程实现从文本描述到图形生成的过程。</p><p><a href="https://github.com/CloudOrc/SolidUI" target="_blank" rel="noopener noreferrer">https://github.com/CloudOrc/SolidUI</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="项目名字含义">项目名字含义<a href="#项目名字含义" class="hash-link" aria-label="项目名字含义的直接链接" title="项目名字含义的直接链接">​</a></h2><p>SolidUI  Solid表示立方几何，UI表示设计交互，代表多维生成设计。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="登录页含义">登录页含义<a href="#登录页含义" class="hash-link" aria-label="登录页含义的直接链接" title="登录页含义的直接链接">​</a></h2><p>登录页的含义，logo 用眼镜的形状，表示观察世界 ，背景那些线条是通过眼睛观看得出图形，深层意思表示创意生成世界。
<img loading="lazy" alt="在这里插入图片描述" src="/zh-CN/assets/images/home-d64eb73b3f8144a5bd50d3b1fe12de55.png" width="3552" height="1848" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="产品思维">产品思维<a href="#产品思维" class="hash-link" aria-label="产品思维的直接链接" title="产品思维的直接链接">​</a></h2><p>“少就是多”</p><p>少就是多，意思是不断精简方案里的元素，只留下有价值的；其余不重要的，要么直接删掉，要么从界面里隐藏起来。对于那些不常用的操作，隐藏之后，即使用户多进行几步操作也没有关系。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="010-版本内涵">0.1.0 版本内涵<a href="#010-版本内涵" class="hash-link" aria-label="0.1.0 版本内涵的直接链接" title="0.1.0 版本内涵的直接链接">​</a></h2><p>这个版本作为第一个版本，设想作为应用框架，具有通用可视化框架能力，不因一些数据管理，BI等一些旧思维影响，只做应用框架，所以很多东西都被去除了，AI生成会彻底改变使用习惯。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="功能列表">功能列表<a href="#功能列表" class="hash-link" aria-label="功能列表的直接链接" title="功能列表的直接链接">​</a></h2><p>下面介绍下整个第一个版本功能列表。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据源管理">数据源管理<a href="#数据源管理" class="hash-link" aria-label="数据源管理的直接链接" title="数据源管理的直接链接">​</a></h3><ul><li>显示数据：显示所有数据源，包括序号，数据源名称，数据源类型，用户，描述信息和操作按钮。</li><li>添加MySQL数据源：输入数据源名称，数据源驱动，URL，用户名，密码，备注后，可以*
成功添加MySQL数据源，并在数据源列表中显示。</li><li>添加Doris数据源：输入数据源名称，数据源驱动，URL，用户名，密码，备注后，可以成功添加Doris数据源，并在数据源列表中显示。</li><li>编辑数据源：可以编辑数据源的名称，数据源驱动，URL，用户名，密码，备注，并在数据源列表中查看编辑后的信息。</li><li>单行删除数据源：通过输入要删除的数据源名称，可以成功删除该数据源，并且该数据源不再显示在数据源列表中。</li><li>数据源过期：可以将选中的数据源设置为过期状态。
<img loading="lazy" alt="在这里插入图片描述" src="/zh-CN/assets/images/datasource-45396a50f5aea7919f517e1d81456424.png" width="3226" height="528" class="img_ev3q"></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="项目管理">项目管理<a href="#项目管理" class="hash-link" aria-label="项目管理的直接链接" title="项目管理的直接链接">​</a></h3><ul><li>添加项目：输入项目名称，项目描述，项目URL后，可以成功添加项目，并在项目列表中显示新增的项目信息。</li><li>查询项目列表：通过输入项目名称，可以查询并输出项目列表。</li><li>编辑项目名：可以编辑项目名称，并在项目列表中查看编辑后的项目信息。</li><li>删除项目：通过输入要删除的项目名称，可以成功删除该项目，并且该项目不再显示在项目列表中。</li><li>项目预览</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="设计页面">设计页面<a href="#设计页面" class="hash-link" aria-label="设计页面的直接链接" title="设计页面的直接链接">​</a></h3><ul><li>场景,增加，修改，删除，重命名。</li><li>页，增加，修改，删除，重命名。</li><li>添加图例：在指定场景和页下添加图例，并为其命名。创建成功后，所在页中显示对应的图例。</li><li>打开数据选择滑窗：在指定场景、页和图例下，打开数据选择滑窗。滑窗打开成功，显示数据源类型、数据源和SQL输入框。</li><li>选择数据源类型：选择数据源类型（如数据库），成功后显示与所选数据源类型相关的数据源选项。</li><li>选择数据源：选择特定的数据源（如MySQL数据库1），成功后可以输入SQL查询语句。</li><li>输入SQL查询语句：输入SQL查询语句并执行，柱形图根据查询返回的数据进行绘制。</li><li>保存页面：保存包括图例和关联数据设置在内的页面，以便后续查看和编辑。</li><li>预览场景：预览整个场景，按照场景和页的顺序查看已创建的图表。</li></ul><p><img loading="lazy" alt="在这里插入图片描述" src="/zh-CN/assets/images/desgin-8fd0648dd93a1c3fd51cb54900ac2bcd.png" width="3574" height="1684" class="img_ev3q"></p>]]></content:encoded>
            <category>SolidUI</category>
            <category>AIGC</category>
            <category>stable-diffusion</category>
        </item>
    </channel>
</rss>